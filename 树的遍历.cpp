//
// Created by c1533 on 2022/8/22.
//
#include<iostream>
/**树的遍历
 * 树是一种递归定义的数据结构，可以用递归算法遍历
 * 1. 先根遍历：若树非空，先访问根节点，再一次对每棵子树进行先根遍历(转换成二叉树后，序列与二叉树先序序列相同)
 * 2. 后根遍历：树非空，先一次对每棵子树进行后根遍历，最后访问根节点(与二叉树中序遍历序列相同)
 * 3. 层次遍历(用队列实现)：树非空，根节点入队；若队列非空，队头元素出队并访问，同时将该元素的孩子依次入队；重复上述步骤
 * 1. 2. 为深度优先遍历，3. 为广度优先遍历
 * */
//void PreOrder(TreeNode *R){
//    if(R!=nullptr){
//        visit(R);
//        while(R有下一个子树T)
//            PreOrder(T);
//    }
//}     //先根
//void PoseOrder(TreeNode *R){
//    if(R!=nullptr){
//        while(R有下一个子树T)
//            PostOrder(T);
//        visit(R);
//    }
//}       //后根

/**森林的遍历
 * 先序遍历：若森林非空，则按如下规则遍历：等同于二叉树先序遍历
 * 访问森林中第一棵树的根节点；先序遍历第一棵树中根节点的子树森林；先序遍历除去第一棵树之后剩余的树构成的森林
 * 中序遍历：等同于对各个树进行后根遍历，或二叉树中序遍历
 * 中序遍历森林中第一棵树的根节点的子树森林；访问第一棵树的根节点；中序遍历出去第一棵树之后剩余的树构成的森林
 * */
